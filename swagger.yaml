tags:
- name: users
  description: users API
- name: property
  description: properties API

paths:
# [GET] users
  /users:
    get:
      tags:
      - users
      summary: Find All Users
      responses:
        200:
          description: 'OK'
        500:
          description: 'Server Error'

# [POST] users
    post:
      tags:
      - users
      summary: Add User
      parameters:
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        201:
          description: 'Created'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [GET] users/id
  /users/{id}:
    get:
      tags:
      - users
      summary: Find User By Id
      parameters:
      - name: id
        in: path
        description: User Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [PUT] users/id
    put:
      tags:
      - users
      summary: Update User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      - name: body
        in: body
        description: user Data
        required: true
        schema:
          $ref: '#/definitions/users'
      responses:
        200:
          description: 'OK'
        400:
          description: 'Bad Request'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'

# [DELETE] users/id
    delete:
      tags:
      - users
      summary: Delete User By Id
      parameters:
      - name: id
        in: path
        description: user Id
        required: true
        type: integer
      responses:
        200:
          description: 'OK'
        409:
          description: 'Conflict'
        500:
          description: 'Server Error'
  /property:
    get:
      tags:
      - property
      summary: Retrieve properties
      description: Retrieve a list of properties with pagination and sorting options.
      parameters:
        - name: page_size
          in: query
          description: Number of items per page
          type: integer
          default: 10
        - name: page_number
          in: query
          description: Page number
          type: integer
          default: 1
        - name: sort_by
          in: query
          description: Column to sort by
          type: string
          enum: [id, price]
          default: id
        - name: sort_order
          in: query
          description: Sort order
          type: string
          enum: [ASC, DESC]
          default: ASC
      responses:
        200:
          description: A list of properties
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  page_number:
                    type: string
                    example: "1"
                  page_size:
                    type: string
                    example: "10"
                  total_count:
                    type: string
                    example: "5040"
                  properties:
                    type: array
                    items:
                      $ref: '#/definitions/Property'
              message:
                type: string
                example: "findAll"
  /property/search:
    get:
      tags:
      - property
      summary: Search for properties
      description: Search for a list of properties with pagination and sorting options.
      parameters:
        - name: query
          in: query
          description: Query to search for.
          type: string
          default: ''
        - name: page_size
          in: query
          description: Number of items per page
          type: integer
          default: 10
        - name: page_number
          in: query
          description: Page number
          type: integer
          default: 1
        - name: sort_by
          in: query
          description: Column to sort by
          type: string
          enum: [id, price]
          default: id
        - name: sort_order
          in: query
          description: Sort order
          type: string
          enum: [ASC, DESC]
          default: ASC
        - name: property_type
          in: query
          description: Property Type
          type: string
          default: ""
        - name: area_min
          in: query
          description: Minimum area in square feet
          type: string
          default: "0"
        - name: area_max
          in: query
          description: Maximum area in square feet
          type: string
          default: ""
        - name: price_min
          in: query
          description: Minimum price in PKR
          type: string
          default: "0"
        - name: price_max
          in: query
          description: Maximum price in PKR
          type: string
          default: ""
        - name: bedrooms
          in: query
          description: Number of bedrooms
          type: string
          default: ""
        - name: start_date
          in: query
          description: Properties inserted from this date (inclusive). Date should be in ISO date string format.
          type: string
          default: ""
        - name: end_date
          in: query
          description: Properties inserted until this date (exclusive). Date should be in ISO date string format.
          type: string
          default: ""
      responses:
        200:
          description: A list of properties
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  page_number:
                    type: string
                    example: "1"
                  page_size:
                    type: string
                    example: "10"
                  total_count:
                    type: string
                    example: "5040"
                  properties:
                    type: array
                    items:
                      $ref: '#/definitions/Property'
              message:
                type: string
                example: "search-properties"
  /property/count:
    get:
      tags:
      - property
      summary: Get total property count
      description: Retrieve the total count of properties.
      parameters:
        - name: query
          in: query
          description: Query to search for.
          type: string
          default: ''
        - name: area_min
          in: query
          description: Minimum area in square feet
          type: string
          default: "0"
        - name: area_max
          in: query
          description: Maximum area in square feet
          type: string
          default: ""
        - name: price_min
          in: query
          description: Minimum price in PKR
          type: string
          default: "0"
        - name: price_max
          in: query
          description: Maximum price in PKR
          type: string
          default: ""
        - name: bedrooms
          in: query
          description: Number of bedrooms
          type: string
          default: ""
        - name: start_date
          in: query
          description: Properties inserted from this date (inclusive). Date should be in ISO date string format.
          type: string
          default: ""
        - name: end_date
          in: query
          description: Properties inserted until this date (exclusive). Date should be in ISO date string format.
          type: string
          default: ""
      responses:
        200:
          description: Total property count
          schema:
            type: object
            properties:
              data:
                type: object
                additionalProperties:
                  type: string
                  example: "5040"
              message:
                type: string
                example: "count"
  /property/count/{city}:
    get:
      tags:
      - property
      summary: Get total property count in specified city
      description: Retrieve the total count of properties available in specified city.
      parameters:
        - name: city
          in: path
          description: Name of the city to count properties for
          required: true
          type: string
        - name: query
          in: query
          description: Query to search for.
          type: string
          default: ''
        - name: area_min
          in: query
          description: Minimum area in square feet
          type: string
          default: "0"
        - name: area_max
          in: query
          description: Maximum area in square feet
          type: string
          default: ""
        - name: price_min
          in: query
          description: Minimum price in PKR
          type: string
          default: "0"
        - name: price_max
          in: query
          description: Maximum price in PKR
          type: string
          default: ""
        - name: bedrooms
          in: query
          description: Number of bedrooms
          type: string
          default: ""
        - name: start_date
          in: query
          description: Properties inserted from this date (inclusive). Date should be in ISO date string format.
          type: string
          default: ""
        - name: end_date
          in: query
          description: Properties inserted until this date (exclusive). Date should be in ISO date string format.
          type: string
          default: ""
      responses:
        200:
          description: Total property count
          schema:
            type: object
            properties:
              data:
                type: object
                additionalProperties:
                  type: string
                  example: "5040"
              message:
                type: string
                example: "count"
  /property/{id}:
    get:
      tags:
      - property
      summary: Retrieve property by ID
      description: Retrieve a property by its ID.
      parameters:
        - name: id
          in: path
          description: ID of the property to retrieve
          required: true
          type: integer
      responses:
        200:
          description: Property details
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Property'
              message:
                type: string
                example: "findOne"
        404:
          description: Property not found
  /property/available-cities:
    get:
      tags:
      - property
      summary: Retrieve Available cities
      description: Retrieve a list of cities for which properties are available.
      responses:
        200:
          description: A list of cities
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  type: string
                  example: "Islamabad"
              message:
                type: string
                example: "available-cities"

  /property/{city}:
    get:
      tags:
      - property
      summary: Retrieve properties
      description: Retrieve a list of properties from a specified city with pagination and sorting options.
      parameters:
        - name: city
          in: path
          description: Name of the city to retrieve properties from
          required: true
          type: string
        - name: page_size
          in: query
          description: Number of items per page
          type: integer
          default: 10
        - name: page_number
          in: query
          description: Page number
          type: integer
          default: 1
        - name: sort_by
          in: query
          description: Column to sort by
          type: string
          enum: [id, price]
          default: id
        - name: sort_order
          in: query
          description: Sort order
          type: string
          enum: [ASC, DESC]
          default: ASC
      responses:
        200:
          description: A list of properties
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  page_number:
                    type: string
                    example: "1"
                  page_size:
                    type: string
                    example: "10"
                  total_count:
                    type: string
                    example: "5040"
                  properties:
                    type: array
                    items:
                      $ref: '#/definitions/Property'
              message:
                type: string
                example: "findAll"
  /property/search/{city}:
    get:
      tags:
      - property
      summary: Search for properties
      description: Search for a list of properties from a specified city with pagination and sorting options.
      parameters:
        - name: query
          in: query
          description: Query to search for.
          type: string
          default: ''
        - name: city
          in: path
          description: Name of the city to retrieve properties from
          required: true
          type: string
        - name: page_size
          in: query
          description: Number of items per page
          type: integer
          default: 10
        - name: page_number
          in: query
          description: Page number
          type: integer
          default: 1
        - name: sort_by
          in: query
          description: Column to sort by
          type: string
          enum: [id, price]
          default: id
        - name: sort_order
          in: query
          description: Sort order
          type: string
          enum: [ASC, DESC]
          default: ASC
        - name: property_type
          in: query
          description: Property Type
          type: string
          default: ""
        - name: area_min
          in: query
          description: Minimum area in square feet
          type: string
          default: "0"
        - name: area_max
          in: query
          description: Maximum area in square feet
          type: string
          default: ""
        - name: price_min
          in: query
          description: Minimum price in PKR
          type: string
          default: "0"
        - name: price_max
          in: query
          description: Maximum price in PKR
          type: string
          default: ""
        - name: bedrooms
          in: query
          description: Number of bedrooms
          type: string
          default: ""
        - name: start_date
          in: query
          description: Properties inserted from this date (inclusive). Date should be in ISO date string format.
          type: string
          default: ""
        - name: end_date
          in: query
          description: Properties inserted until this date (exclusive). Date should be in ISO date string format.
          type: string
          default: ""
      responses:
        200:
          description: A list of properties
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  page_number:
                    type: string
                    example: "1"
                  page_size:
                    type: string
                    example: "10"
                  total_count:
                    type: string
                    example: "5040"
                  properties:
                    type: array
                    items:
                      $ref: '#/definitions/Property'
              message:
                type: string
                example: "search-properties"

# definitions
definitions:
  users:
    type: object
    required:
        - email
        - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password
  Property:
    type: object
    properties:
      id:
        type: integer
        example: 1
      added:
        type: integer
        example: 1617187200
      created_at:
        type: string
        format: date-time
        example: '2023-05-17T00:00:00Z'
      updated_at:
        type: string
        format: date-time
        example: '2023-05-17T00:00:00Z'
      price:
        type: string
        maxLength: 255
        example: '1000000'
      location:
        type: string
        maxLength: 255
        example: 'New York'
      bath:
        type: string
        maxLength: 255
        example: '2'
      area:
        type: string
        maxLength: 255
        example: '1500 sq ft'
      purpose:
        type: string
        maxLength: 255
        example: 'Residential'
      bedroom:
        type: string
        maxLength: 255
        example: '3'
      url:
        type: string
        format: uri
        example: 'http://example.com/property/1'
      area_trends:
        type: string
        format: uri
        example: 'http://example.com/property/1'
      popularity_trends:
        type: string
        format: uri
        example: 'http://example.com/property/1'
      contact:
        type: string
        format: uri
        example: 'http://example.com/property/1'
      cover_photo_url:
        type: string
        format: uri
        example: 'http://example.com/property/1.jpg'
      external_id:
        type: string
        example: "123456789"
      initial_amount:
        type: string
        maxLength: 255
        example: '50000'
      monthly_installment:
        type: string
        maxLength: 255
        example: '1500'
      remaining_installments:
        type: string
        maxLength: 255
        example: '36'
      desc:
        type: string
        example: 'Beautiful property located in the heart of the city.'
      header:
        type: string
        example: 'Prime Location Property'
      type:
        type: string
        maxLength: 255
        example: 'Apartment'
    required:
      - id
      - added
      - created_at
      - updated_at
      - price
      - location
      - bath
      - area
      - purpose
      - bedroom
      - desc
      - header
      - type

schemes:
 - https
 - http
